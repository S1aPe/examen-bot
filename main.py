import telebot
import matplotlib.pyplot as plt
from collections import defaultdict
import numpy as np

bot = telebot.TeleBot("7576409956:AAF4V9nLSi837tfd3HPlhKUqGEQ8_TsFN1k")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data = defaultdict(lambda: {
    'income': 0.0,
    'expenses': defaultdict(float)
})

def create_combined_chart(chat_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
    
    # –î–∞–Ω–Ω—ã–µ
    income = user_data[chat_id]['income']
    expenses = user_data[chat_id]['expenses']
    total_expenses = sum(expenses.values())
    
    # –ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞
    bars = ax1.bar(['–î–æ—Ö–æ–¥—ã', '–†–∞—Å—Ö–æ–¥—ã'], [income, total_expenses],
                  color=['#4CAF50', '#F44336'], width=0.5)
    ax1.set_title('–û–±—â–∏–π –±–∞–ª–∞–Ω—Å', pad=20, fontsize=14)
    for bar in bars:
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2, height,
                f'{height:.2f} —Ä—É–±',
                ha='center', va='bottom', fontsize=12)
    
    # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
    if expenses:
        labels = []
        sizes = []
        for cat, amount in expenses.items():
            percentage = 100 * amount / total_expenses
            labels.append(f"{cat}\n({percentage:.1f}%)")
            sizes.append(amount)
        
        wedges, _, _ = ax2.pie(
            sizes, labels=labels, autopct=lambda p: '',
            colors=plt.cm.tab20.colors, startangle=90,
            wedgeprops={'linewidth': 1, 'edgecolor': 'white'}
        )
        
        for i, wedge in enumerate(wedges):
            angle = (wedge.theta2 - wedge.theta1)/2 + wedge.theta1
            x = 0.7 * np.cos(np.deg2rad(angle))
            y = 0.7 * np.sin(np.deg2rad(angle))
            ax2.text(x, y, f"{sizes[i]:.0f} —Ä—É–±", 
                    ha='center', va='center', fontsize=10)
    else:
        ax2.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', ha='center', va='center', fontsize=12)
    
    ax2.set_title('–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', pad=20, fontsize=14)
    ax2.axis('equal')
    
    plt.tight_layout()
    plt.savefig('chart.png', dpi=100)
    plt.close()
    return 'chart.png'

@bot.message_handler(commands=['start', 'help'])
def start(message):
    help_text = """
üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫</b> üí∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/add_income [—Å—É–º–º–∞] - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥
/add_expense [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [—Å—É–º–º–∞] - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞)
/report - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç
/clear - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ

–ü—Ä–∏–º–µ—Ä—ã:
/add_income 15000
/add_expense –ø—Ä–æ–¥—É–∫—Ç—ã 3500
/add_expense 2000 (–¥–æ–±–∞–≤–∏—Ç—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–¥—Ä—É–≥–æ–µ")
/report
"""
    bot.send_message(message.chat.id, help_text, parse_mode='HTML')

@bot.message_handler(commands=['add_income'])
def add_income(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        amount = float(message.text.split()[1])
        chat_id = message.chat.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        user_data[chat_id]['income'] += amount
        
        # –°–æ–∑–¥–∞—ë–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        chart = create_combined_chart(chat_id)
        with open(chart, 'rb') as photo:
            bot.send_photo(
                chat_id, photo,
                caption=f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –¥–æ—Ö–æ–¥: {amount:.2f} —Ä—É–±.\n–û–±—â–∏–π –¥–æ—Ö–æ–¥: {user_data[chat_id]['income']:.2f} —Ä—É–±."
            )
    except IndexError:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É!\n–ü—Ä–∏–º–µ—Ä: /add_income 15000")
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /add_income 15000")

@bot.message_handler(commands=['add_expense'])
def add_expense(message):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        parts = message.text.split()
        chat_id = message.chat.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å—É–º–º—É
        if len(parts) == 2:  # –¢–æ–ª—å–∫–æ —Å—É–º–º–∞ (/add_expense 100)
            category = "–¥—Ä—É–≥–æ–µ"
            amount = float(parts[1])
        elif len(parts) >= 3:  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Å—É–º–º–∞ (/add_expense –µ–¥–∞ 100)
            category = parts[1]
            amount = float(parts[2])
        else:
            raise ValueError
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        user_data[chat_id]['expenses'][category] += amount
        
        # –°–æ–∑–¥–∞—ë–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        chart = create_combined_chart(chat_id)
        with open(chart, 'rb') as photo:
            bot.send_photo(
                chat_id, photo,
                caption=f"üí∏ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥: {category} -{amount:.2f} —Ä—É–±.\n–í—Å–µ–≥–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {user_data[chat_id]['expenses'][category]:.2f} —Ä—É–±."
            )
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_expense [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [—Å—É–º–º–∞]\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ: /add_expense [—Å—É–º–º–∞]")

@bot.message_handler(commands=['report'])
def report(message):
    chat_id = message.chat.id
    income = user_data[chat_id]['income']
    expenses = user_data[chat_id]['expenses']
    total_expenses = sum(expenses.values())
    balance = income - total_expenses
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞
    report_text = f"""
üìä <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç</b>
‚îú –î–æ—Ö–æ–¥—ã: {income:.2f} —Ä—É–±.
‚îú –†–∞—Å—Ö–æ–¥—ã: {total_expenses:.2f} —Ä—É–±.
‚îî <b>–ë–∞–ª–∞–Ω—Å</b>: {balance:.2f} —Ä—É–±.

üîç <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤:</b>
"""
    if expenses:
        for cat, amount in expenses.items():
            percentage = 100 * amount / total_expenses
            report_text += f"‚îú {cat}: {amount:.2f} —Ä—É–±. ({percentage:.1f}%)\n"
    else:
        report_text += "‚îî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö\n"
    
    # –°–æ–∑–¥–∞—ë–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    chart = create_combined_chart(chat_id)
    with open(chart, 'rb') as photo:
        bot.send_photo(chat_id, photo, caption=report_text, parse_mode='HTML')

@bot.message_handler(commands=['clear'])
def clear(message):
    chat_id = message.chat.id
    user_data[chat_id] = {'income': 0.0, 'expenses': defaultdict(float)}
    bot.send_message(chat_id, "‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    bot.polling()